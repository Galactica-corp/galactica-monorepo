/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Certificate content for verification of trading on a centralized exchange.
 */
export interface CEXCertificateContent {
  /**
   * The total volume in USD equivalent traded by the user on the exchange.
   */
  totalSwapVolume: string;
  /**
   * The volume in USD equivalent traded by the user on the exchange over the past year.
   */
  swapVolumeYear?: string;
  /**
   * The volume in USD equivalent traded by the user on the exchange over the past half year (6 months).
   */
  swapVolumeHalfYear?: string;
}
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Certificate content for verification of trading on a decentralized exchange.
 */
export interface DEXCertificateContent {
  /**
   * The Ethereum address of the decentralized exchange.
   */
  address: string;
  /**
   * The total volume in USD equivalent traded by the user on the exchange.
   */
  totalSwapVolume: string;
  /**
   * The volume in USD equivalent traded by the user on the exchange over the past year.
   */
  swapVolumeYear?: string;
  /**
   * The volume in USD equivalent traded by the user on the exchange over the past half year (6 months).
   */
  swapVolumeHalfYear?: string;
}
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Certificate content for Know Your Customer (KYC) verification data containing various fields required for identity verification and validation.
 */
export interface KYCCertificateContent {
  /**
   * The surname (last name) of the individual.
   */
  surname: string;
  /**
   * The forename (first name) of the individual.
   */
  forename: string;
  /**
   * The middle name of the individual.
   */
  middlename?: string;
  /**
   * The year of birth of the individual.
   */
  yearOfBirth: number;
  /**
   * The month of birth of the individual (1-12).
   */
  monthOfBirth: number;
  /**
   * The day of birth of the individual (1-31).
   */
  dayOfBirth: number;
  /**
   * The citizenship of the individual as an ISO 3166-1 alpha-3 country code.
   */
  citizenship: string;
  /**
   * The level of KYC verification achieved.
   */
  verificationLevel?: 0 | 1 | 2;
  /**
   * The street name and house number of the individual's address.
   */
  streetAndNumber?: string;
  /**
   * The postal code of the individual's address.
   */
  postcode?: string;
  /**
   * The town or city of the individual's address.
   */
  town?: string;
  /**
   * The region of the individual's address as an ISO 3166-2 code.
   */
  region?: string;
  /**
   * The country of the individual's address as an ISO 3166-1 alpha-3 country code.
   */
  country: string;
}
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Certificate content for REY verification data.
 */
export interface REYCertificateContent {
  /**
   * The numeric ID of the user on X (Twitter).
   */
  xID: string;
  /**
   * The username on X (Twitter), between 4 and 15 characters.
   */
  xUsername: string;
  /**
   * The overall REY score.
   */
  reyScoreAll?: number;
  /**
   * The REY score specific to Galactica.
   */
  reyScoreGalactica?: number;
  /**
   * The faction identifier for REY.
   */
  reyFaction?: number;
}
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Certificate content for arbitrary string key-value data.
 */
export interface SimpleJSONCertificateContent {
  [k: string]: unknown;
}
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Certificate content for Telegram account verification data.
 */
export interface TelegramCertificateContent {
  /**
   * The number of days the account has been active.
   */
  activeDaysCount: number;
  /**
   * The number of contacts with at least 10 messages.
   */
  contactWithAtLeast10MessagesCount?: number;
  /**
   * The timestamp when the account was created. Must be less than the current time.
   */
  createdAt: string;
  /**
   * The average number of messages sent per month.
   */
  meanMonthlyMessageCount?: number;
}
/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Certificate content for X/Twitter account verification data.
 */
export interface TwitterCertificateContent {
  /**
   * The timestamp when the account was created. Must be less than the current time.
   */
  createdAt: string;
  /**
   * The numeric ID of the Twitter account.
   */
  id: string;
  /**
   * The number of followers the account has.
   */
  followersCount?: number;
  /**
   * The number of accounts the user is following.
   */
  followingCount?: number;
  /**
   * The number of lists the account is a member of.
   */
  listedCount?: number;
  /**
   * The number of tweets the account has posted.
   */
  tweetCount?: number;
  /**
   * The username of the Twitter account.
   */
  username: string;
  /**
   * Whether the account is verified.
   */
  verified?: boolean;
}
